@using ADefWebserver.Module.HtmlTextV2.Services
@namespace ADefWebserver.Module.HtmlTextV2
@inherits ModuleBase
@inject IHtmlTextService HtmlTextService
@inject IStringLocalizer<Index> Localizer

@if (PageState.EditMode)
{
    <div class="text-center mb-2">
        <ActionLink Action="Edit" EditMode="true" ResourceKey="Edit" />
    </div>
}

@((MarkupString)content)

@if (PageState.EditMode && content.Length > 3000)
{
    <div class="text-center mt-2">
        <ActionLink Action="Edit" EditMode="true" ResourceKey="Edit" />
    </div>
}
<h3>Default set of tools</h3>
<HtmlEditorDialog />
<HtmlEditorComponent @bind-Value=@value style="height: 500px; margin-bottom: 1rem;" UploadUrl="upload/image" Change=@OnChange Paste=@OnPaste Execute=@OnExecute />

@code {

    public override List<Resource> Resources => new List<Resource>()
    {
        new Resource { ResourceType = ResourceType.Stylesheet, Url = ModulePath() + "Module.css" },
        new Resource { ResourceType = ResourceType.Stylesheet, Url = "_content/HtmlEditor.Blazor/css/default.css" },
        new Resource { ResourceType = ResourceType.Script, Url = "_content/HtmlEditor.Blazor/HtmlEditor.Blazor.js" },
        new Resource { ResourceType = ResourceType.Stylesheet, Url = "_content/HtmlEditor.Blazor/fonts/MaterialIcons-Regular.woff" },
        new Resource { ResourceType = ResourceType.Stylesheet, Url = "_content/HtmlEditor.Blazor/fonts/roboto-v15-latin-300.woff" },
        new Resource { ResourceType = ResourceType.Stylesheet, Url = "_content/HtmlEditor.Blazor/fonts/roboto-v15-latin-700.woff" },
        new Resource { ResourceType = ResourceType.Stylesheet, Url = "_content/HtmlEditor.Blazor/fonts/roboto-v15-latin-regular.woff" },
        new Resource { ResourceType = ResourceType.Stylesheet, Url = "_content/HtmlEditor.Blazor/fonts/SourceSansPro-Black.woff" },
        new Resource { ResourceType = ResourceType.Stylesheet, Url = "_content/HtmlEditor.Blazor/fonts/SourceSansPro-BlackIt.woff" },
        new Resource { ResourceType = ResourceType.Stylesheet, Url = "_content/HtmlEditor.Blazor/fonts/SourceSansPro-Bold.woff" },
        new Resource { ResourceType = ResourceType.Stylesheet, Url = "_content/HtmlEditor.Blazor/fonts/SourceSansPro-BoldIt.woff" },
        new Resource { ResourceType = ResourceType.Stylesheet, Url = "_content/HtmlEditor.Blazor/fonts/SourceSansPro-ExtraLight.woff" },
        new Resource { ResourceType = ResourceType.Stylesheet, Url = "_content/HtmlEditor.Blazor/fonts/SourceSansPro-ExtraLightIt.woff" },
        new Resource { ResourceType = ResourceType.Stylesheet, Url = "_content/HtmlEditor.Blazor/fonts/SourceSansPro-It.woff" },
        new Resource { ResourceType = ResourceType.Stylesheet, Url = "_content/HtmlEditor.Blazor/fonts/SourceSansPro-Light.woff" },
        new Resource { ResourceType = ResourceType.Stylesheet, Url = "_content/HtmlEditor.Blazor/fonts/SourceSansPro-LightIt.woff" },
        new Resource { ResourceType = ResourceType.Stylesheet, Url = "_content/HtmlEditor.Blazor/fonts/SourceSansPro-Regular.woff" },
        new Resource { ResourceType = ResourceType.Stylesheet, Url = "_content/HtmlEditor.Blazor/fonts/SourceSansPro-Semibold.woff" },
        new Resource { ResourceType = ResourceType.Stylesheet, Url = "_content/HtmlEditor.Blazor/fonts/SourceSansPro-SemiboldIt.woff" },
    };

    private string content = "";

    public override string RenderMode => RenderModes.Static;

    protected override async Task OnParametersSetAsync()
    {
        try
        {
            if (ShouldRender())
            {
                var htmltext = await HtmlTextService.GetHtmlTextAsync(ModuleState.ModuleId);
                if (htmltext != null)
                {
                    content = htmltext.Content;
                    content = Utilities.FormatContent(content, PageState.Alias, "render");
                }
                else
                {
                    content = "";
                }
            }
        }
        catch (Exception ex)
        {
            await logger.LogError(ex, "Error Loading Content {Error}", ex.Message);
            AddModuleMessage(Localizer["Error.Content.Load"], MessageType.Error);
        }
    }

    string value = @"
    <h1>HtmlEditor.Blazor Getting Started Instructions</h1>
    <h2>1. Install</h2>
    <p>
        HtmlEditor Blazor Components are distributed as the <a href=""https://www.nuget.org/packages/HtmlEditor.Blazor/"">HtmlEditor.Blazor</a> nuget package.
    </p>
    <p>
        You can add them to your project in one of the following ways
    </p>
    <ul>
        <li>Install the package from command line by running <code>dotnet add package HtmlEditor.Blazor</code></li>
        <li>Add the project from the Visual Nuget Package Manager.</li>
    </ul>
    <h2>2. Import the namespace</h2>
    <p>
        Open the <code>_Imports.razor</code> file of your Blazor application and add these two lines <code>@using HtmlEditor</code> and <code>@using HtmlEditor.Blazor</code>.
    </p>
    <h2>3. Include a theme</h2>

    <p>
        Alternatively you can include <code>&lt;link rel=""stylesheet"" href=""_content/HtmlEditor.Blazor/css/default.css""&gt;</code> which embeds Bootstrap.
    </p>
    <h2>4. Include HtmlEditor.Blazor.js</h2>
    <p>
        Open the <code>_Host.cshtml</code> file (server-side Blazor) or <code>wwwroot/index.html</code> (client-side WebAssembly Blazor) and include this snippet <code>&lt;script src=""_content/HtmlEditor.Blazor/HtmlEditor.Blazor.js""&gt;&lt;/script&gt;</code>
    </p>
    <h2>5. Use a component</h2>
    <p>
        Use any HtmlEditor Blazor component by typing its tag name in a Blazor page e.g. <code>&lt;HtmlEditorButton Text=""Hi""&gt;&lt;/HtmlEditorButton&gt;</code>
    </p>
    <h4>Setting a property</h4>
<pre>
<code>
&lt;HtmlEditorComponent UploadUrl=""upload/image"" Change=""@OnChange"" Paste=""@OnPaste"" Execute=""@OnExecute"" &gt;&lt;/HtmlEditorComponent&gt;


@code {
    void OnPaste(HtmlEditorPasteEventArgs args)
    {
     ////
    }

    void OnChange(string html)
    {
      ////
    }

    void OnExecute(HtmlEditorExecuteEventArgs args)
    {
       ////
    }
}
</code>
</pre>
    ";

    void OnPaste(HtmlEditorPasteEventArgs args)
    {
        //console.Log($"Paste: {args.Html}");
    }

    void OnChange(string html)
    {
        //console.Log($"Change: {html}");
    }

    void OnExecute(HtmlEditorExecuteEventArgs args)
    {
        //console.Log($"Execute: {args.CommandName}");
    }
}